<!-- Featured Products Grid Section -->
<div class="featured-products-grid">
  <div class="grid">
    {% for block in section.blocks %}
      {% assign product = all_products[block.settings.product] %}
      {% if product %}
        <div class="grid-item">
          <a
            href="javascript:void(0);"
            class="product-link {{ product.handle }}"
            data-handle="{{ product.handle }}"
            data-id="{{ product.id }}"
          >
            <span class="plus-icon">
              <img src="{{ 'plus-icon.svg' | asset_url }}" height="22px" width="22px">
            </span>
            <img src="{{ product | image_url: width: 500 }}" alt="{{ product.title }}">
          </a>
        </div>
      {% endif %}
    {% endfor %}
  </div>
</div>

<!-- Product Popup Modal -->
<div id="product-modal" class="product-modal">
  <div class="modal-content">
    <span class="close-button">&times;</span>
    <div class="modal-body"></div>
    <div class="modal-cta">
      <a href="#" class="btn">ADD TO CART <img src="{{ 'right-arrow.svg' | asset_url  }}" width="50" /></a>
    </div>
  </div>
</div>

<!-- Section Settings Schema -->
{% schema %}
{
  "name": "Featured Products Grid",
  "settings": [],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Select Product"
        }
      ]
    }
  ],
  "max_blocks": 6,
  "presets": [
    {
      "name": "Featured Products Grid",
      "category": "Products"
    }
  ]
}
{% endschema %}

<!-- Styles for the Featured Products Grid -->
<style>
  .featured-products-grid {
    padding: 10px 50px;
    margin-top: 90px;
  }
  .featured-products-grid .grid {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-gap: 20px;
  }
  .featured-products-grid .product-link {
    width: 100%;
    height: 100%;
    display: block;
    aspect-ratio: 1/1;
  }
  .featured-products-grid .grid-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  .product-link {
    position: relative;
    cursor: initial;
  }
  .plus-icon img {
    max-width: 10px;
    max-height: 10px;
  }
  .plus-icon {
    display: block;
    background: #f8f8f8;
    position: absolute;
    top: 0;
    left: 0;
    width: 22px;
    height: 22px;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 50%;
    cursor: pointer;
  }
  .black-leather-bag .plus-icon {
    top: 54%;
    left: 60%;
  }
  .classic-leather-jacket .plus-icon {
    top: 16%;
    left: 70%;
  }
  .blue-silk-tuxedo .plus-icon {
    top: 50%;
    left: 83%;
  }
  .classic-varsity-top .plus-icon {
    top: 25%;
    left: 50%;
  }
  .chequered-red-shirt .plus-icon {
    top: 19%;
    left: 60%;
  }
  .dark-denim-top .plus-icon {
    top: 38%;
    left: 75%;
  }
  #product-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: none;
    justify-content: center;
    align-items: center;
  }
  .modal-content {
    background: #fff;
    max-width: 311px;
    position: relative;
    padding: 25px 20px;
  }
  .modal-content img {
    width: 120px;
    height: 140px;
    object-fit: cover;
    margin-right: 8px;
  }
  #modal-product-info {
    display: flex;
    margin-top: 15px;
  }
  .close-button {
    position: absolute;
    top: 0px;
    right: 10px;
    text-align: right;
    cursor: pointer;
    color: #000;
    font-size: 20px;
  }

  /* Color Variations */
  .color-variations {
    display: flex;
  }
  .color-variant {
    flex: 1;
  }
  .color-variant input[type='radio'] {
    display: none;
  }
  .color-variant label {
    display: flex;
    align-items: center;
    cursor: pointer;
    padding-left: 9.19px;
    height: 40px;
    position: relative;
    overflow: hidden;
    z-index: 1;
    border: 1px solid #000;
  }
  .color-variant:nth-child(2) label:after {
    content: '';
    position: absolute;
    top: 0;
    right: -100%;
    width: 100%;
    height: 100%;
    background: #000;
    z-index: -1;
    transition: all 0.2s ease-in-out;
  }
  .color-variant:last-child label:after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: #000;
    z-index: -1;
    transition: all 0.2s ease-in-out;
  }
  .color-variant:nth-child(2) input[type='radio']:checked + label:after {
    right: 0;
  }
  .color-variant:last-child input[type='radio']:checked + label:after {
    left: 0;
  }
  .color-variant input[type='radio']:checked + label {
    color: #fff;
  }
  div#selectedSize {
    border: 1px solid #000;
    height: 40px;
    line-height: 40px;
    padding-left: 13px;
    margin-top: 6px;
    position: relative;
    cursor: pointer;
  }
  .size-variations {
    position: relative;
  }
  ul#sizesList {
    border: 1px solid #000;
    border-top: unset;
    list-style: none;
    padding: 0;
    text-align: center;
    margin-top: 0;
    position: absolute;
    width: 100%;
    z-index: 99;
    background: #fff;
  }
  #selectedSize:after {
    content: url({{ 'caret-icon.svg' | asset_url }});
    position: absolute;
    top: 0;
    right: 0;
    width: 50px;
    height: 100%;
    text-align: center;
  }
  #selectedSize:before {
    content: '';
    position: absolute;
    top: 0;
    right: 50px;
    width: 1px;
    height: 100%;
    background: #000;
  }
  #sizesList li:hover {
    cursor: pointer;
    background: #000;
    color: #fff;
  }
  .color-label-text {
    flex: 1 0 100%;
  }
  .color-variations {
      flex-wrap: wrap;
  }
  .size-label-text {
      margin-top: 11.52px;
  }
  .modal-cta img {
      max-width: 33.7px;
      height: auto;
      position: absolute;
      top: 37%;
      right: 10%;
  }
  .modal-cta .btn {
      background: #000;
      color: #fff;
      text-decoration: none;
      display: block;
      text-align: center;
      height: 45px;
      line-height: 45px;
      width: 100%;
      margin-top: 51px;
      position: relative;
  }
</style>

<!-- Scripts for the Featured Products Grid -->
<script>
  document.addEventListener('DOMContentLoaded', function () {
    let modal = document.getElementById('product-modal');
    let modalBody = modal.querySelector('.modal-body');
    let closeButton = modal.querySelector('.close-button');
    let productLinks = document.querySelectorAll('.featured-products-grid .plus-icon');
  
    productLinks.forEach(function (link) {
      link.addEventListener('click', function (event) {
        event.preventDefault();
        var handle = this.parentElement.getAttribute('data-handle');
  
        fetch('/products/' + handle + '.js')
          .then((response) => {
            return response.json();
          })
          .then((data) => {
            showPopUp(data);
          });
      });
    });
  
    function showPopUp(data) {
      let modalContent = document.createElement('div');
      modalContent.id = 'modal-product-info';
  
      let lhs = document.createElement('div');
      lhs.classList.add('lhs');
  
      let rhs = document.createElement('div');
      rhs.classList.add('rhs');
  
      let productPic = document.createElement('div');
      productPic.id = 'product-pic';
      let productImg = document.createElement('img');
  
      let productTitle = document.createElement('div');
      productTitle.id = 'product-title';
  
      let productPrice = document.createElement('div');
      productPrice.id = 'product-price';
  
      let productDescription = document.createElement('div');
      productDescription.id = 'product-description';
  
      let colorVariations = document.createElement('div');
      colorVariations.classList.add('color-variations');
      let colorLabel = document.createElement('div');
      colorLabel.classList.add('color-label-text');
      colorLabel.innerText = "Color";
      colorVariations.appendChild(colorLabel);
  
      let sizeVariations = document.createElement('div');
      sizeVariations.classList.add('size-variations');
      let sizeLabel = document.createElement('div');
      sizeLabel.classList.add('size-label-text');
      sizeLabel.innerText = "Size";
      sizeVariations.appendChild(sizeLabel);
  
      // Create selectedSize element
      let selectedSize = document.createElement('div');
      selectedSize.id = 'selectedSize';
      selectedSize.innerText = 'Choose your size';
      sizeVariations.appendChild(selectedSize);

      let sizeWrapper = document.createElement('div');
      sizeWrapper.id = "sizeDropDownWrap";
      sizeWrapper.appendChild(sizeVariations); 
  
      productPic.appendChild(productImg);
      lhs.appendChild(productPic);
  
      rhs.appendChild(productTitle);
      rhs.appendChild(productPrice);
      rhs.appendChild(productDescription);
  
      modalContent.appendChild(lhs);
      modalContent.appendChild(rhs);
      modalBody.appendChild(modalContent);
      modalBody.appendChild(colorVariations);
      modalBody.appendChild(sizeVariations);
  
      productImg.src = data.featured_image;
      productTitle.innerHTML = data.title;
      productPrice.innerHTML = (data.price / 100).toLocaleString("de-DE", {style: "currency", currency: "EUR"} );
      productDescription.innerHTML = data.description;
  
      let productVariations = data.options;
  
      let colorsData = getColors(productVariations);
      let sizesData = getSizes(productVariations);
  
      addColorInputs(colorsData, colorVariations);
      addSizeDropDown(sizesData, sizeVariations);
  
      // Now that sizesList is in the DOM, we can attach event listeners
      let sizesMenu = document.getElementById("sizesList");
      let showDropDown = false;
  
      // Toggle dropdown visibility when selectedSize is clicked
      selectedSize.addEventListener("click", function() {
        if (showDropDown) {
          sizesMenu.style.display = "none";
          sizesList.classList.remove("open")
          showDropDown = false;
        } else {
          sizesMenu.style.display = "block";
          selectedSize.classList.add("open")
          showDropDown = true;
        }
      });
  
      // Update selectedSize text when a size is selected
      let sizesListItems = sizesMenu.querySelectorAll("li");
      sizesListItems.forEach((sizeItem) => {
        sizeItem.addEventListener("click", function() {
          selectedSize.innerText = this.innerText;
          sizesMenu.style.display = "none";
          showDropDown = false;
        });
      });
  
      modal.style.display = 'flex';
      console.log(data);
    }
  
    function getColors(variations) {
      for (let i = 0; i < variations.length; i++) {
        if (variations[i].name.toLowerCase() === 'color') {
          console.log('colors data', variations[i]);
          return variations[i];
        }
      }
    }
  
    function addColorInputs(colors, div) {
      //add color input field
      for (let color of colors.values) {
        let colorDiv = document.createElement('div');
        colorDiv.classList.add('color-variant');
        let colorInput = document.createElement('input');
        let colorName = color.toLowerCase();
        colorInput.type = 'radio';
        colorInput.name = 'product-color';
        colorInput.value = colorName;
        colorInput.classList.add(`color-${colorName}`);
        colorInput.id = 'var-' + colorName;
        colorDiv.appendChild(colorInput);
  
        //adding label for color input
        let colorLabel = document.createElement('label');
        colorLabel.htmlFor = 'var-' + colorName; // Associate label with input via 'for' attribute
        colorLabel.classList.add('color-label');
        colorLabel.classList.add(`color-${colorName}`); // Add a class for styling
        colorLabel.innerText = colorName;
        colorLabel.style.borderLeft = '5px solid ' + colorName;
        colorDiv.appendChild(colorLabel);
        div.appendChild(colorDiv);
  
        console.log(colorInput);
      }
    }
  
    function getSizes(variations) {
      for (let i = 0; i < variations.length; i++) {
        if (variations[i].name.toLowerCase() === 'size') {
          console.log('sizes data', variations[i]);
          return variations[i];
        }
      }
    }
  
    function addSizeDropDown(sizes, div) {
      let sizesList = document.createElement('ul');
      sizesList.id = 'sizesList';
      sizesList.style.display = 'none'; // Hide dropdown initially
  
      for (let size of sizes.values) {
        let sizeItem = document.createElement('li');
        sizeItem.innerText = size;
        sizeItem.classList.add('sizeItem');
        sizesList.append(sizeItem);
      }
      div.appendChild(sizesList);
      console.log(div);
    }
  
    closeButton.addEventListener('click', function () {
      modal.style.display = 'none';
      modalBody.innerHTML = '';
    });
  
    window.addEventListener('click', function (event) {
      if (event.target == modal) {
        modal.style.display = 'none';
        modalBody.innerHTML = '';
      }
    });
  });
</script>
